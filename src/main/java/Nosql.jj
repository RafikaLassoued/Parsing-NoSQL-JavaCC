options
{
  STATIC = false;
}
PARSER_BEGIN(Nosql)
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.*; 
import java.io.InputStream;
public class Nosql{
public static void main(String args[]) {
Nosql parseur;
try {
parseur = new Nosql(System.in);
parseur.Start();
System.out.println("it is valid NoSQL query expression ");
} catch(TokenMgrError e) {
            System.err.println("[LEXING ERROR] Invalid character");
            System.exit(0);
        }
        catch(ParseException e) {
            System.err.println("[PARSING EXCEPTION] Invalid Input");
            System.exit(0);
        }

} }
PARSER_END(Nosql)
SKIP :
{
  " "
| "\t"
| "\r"
}
/*variable*/
TOKEN :
{ 
  <INSERT : "insert">
| <DB : "db" >
| <NAME : (["a"-"z"])+>
| <KEY_VALUE: (["0"-"9"])+>
| <QUO : "\"" >
| <COMMA : ",">
| <BRACE_OPEN: "{">
| <BRACE_CLOSE: "}">
| <COLON: ":">
| <OPEN_PAR : "(" >
| <CLOSE_PAR : ")" >
| <DOT : "." >
| <EOL: "\n" >
}

void Start() :
{}
{ expression()<EOL>  }
void  expression () :
{}
{ 
  <DB> <DOT> kaynamekayvalue() <DOT> <INSERT> OBJET ()
  

}
void OBJET () :
{}
{ 
     <OPEN_PAR >
        <BRACE_OPEN>
		kaynamekayvalue()
		<COLON>
                kaynamekayvalue()
		(
			<COMMA>
			 kaynamekayvalue ()
		         <COLON>
                         kaynamekayvalue()
		)+
        <BRACE_CLOSE>
      <CLOSE_PAR>
}
void kaynamekayvalue ()throws NumberFormatException  :
{Token n;}

{LOOKAHEAD(2)
  n=<NAME>
 |
    <QUO> n=<NAME> <QUO>
 |
  n=<KEY_VALUE>

}
